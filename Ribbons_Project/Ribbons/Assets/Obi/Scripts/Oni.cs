using UnityEngine;
using System;
using System.Collections;
using System.Runtime.InteropServices;

/**
 * Interface for the Oni particle physics library.
 */
public static class Oni {

	public enum ConstraintType
    {
        Tether = 0,
        Pin = 1,
        Volume = 2,
        Bending = 3,
        Distance = 4,
        ParticleCollision = 5,
        Density = 6,
        Collision = 7,
        Skin = 8,
        Aerodynamics = 9,
        ShapeMatching = 10,
    };

	public enum ParticlePhase{
		SelfCollide = 1 << 24,
		Fluid = 1 << 25
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct SolverParameters{

		public enum Interpolation
		{
			None,
			Interpolate,
		};

		[Tooltip("Same as Rigidbody.interpolation. Set to INTERPOLATE for cloth that is applied on a main character or closely followed by a camera. NONE for everything else.")]
		public Interpolation interpolation;
		public Vector3 gravity;

		[Tooltip("Amount of viscous drag force applied to particle velocities. Increase its value to make particles come to rest faster. Be careful: high values can make the simulation unstable!")]
		public float damping; 		              

		public SolverParameters(Interpolation interpolation, Vector3 gravity){
			this.interpolation = interpolation;
			this.gravity = gravity;
			damping = 0;
		}

	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct ConstraintParameters{

		public enum EvaluationOrder
		{
			Sequential,
			Parallel
		};

		[Tooltip("Whether this constraint group is solved or not.")]
		public bool enabled;

		[Tooltip("Order in which constraints are evaluated. SEQUENTIAL converges faster but is not very stable. PARALLEL is very stable but converges slowly, requiring more iterations to achieve the same result.")]
		public EvaluationOrder evaluationOrder;								/**< Constraint evaluation order.*/
		
		[Tooltip("Number of relaxation iterations performed by the constraint solver. A low number of iterations will perform better, but be less accurate.")]
		public int iterations;												/**< Amount of solver iterations per step for this constraint group.*/
		
		[Tooltip("Over (or under if < 1) relaxation factor used. At 1, no overrelaxation is performed. At 2, constraints double their relaxation rate. High values reduce stability but improve convergence.")]
		[Range(0.1f,2)]
		public float SORFactor;												/**< Sucessive over-relaxation factor for parallel evaluation order.*/
		

		public ConstraintParameters(bool enabled, EvaluationOrder order, int iterations){
			this.enabled = enabled;
			this.iterations = iterations;
			this.evaluationOrder = order;
			this.SORFactor = 1;
		}
		
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct Bounds{
		public Vector3 min;
		public Vector3 max;

		public Vector3 Center{
			get{return min + (max-min)*0.5f;}
		}

		public Vector3 Size{
			get{return max-min;}
		}

		public Bounds(Vector3 min, Vector3 max){
			this.min = min;
			this.max = max;
		}
	}

	public enum ShapeType{
		Sphere = 0,
		Box = 1,
		Capsule = 2,
		Heightmap = 3
	}

	public enum MaterialCombineMode{
		Average = 0,
		Minimium = 1,
		Multiply = 2,
        Maximum = 3
    }

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct Rigidbody{

		public Vector3 linearVelocity;
		public Vector3 angularVelocity;
		public Vector3 centerOfMass;
		public Vector3 inertiaTensor;
		public float inverseMass;
		
		public Rigidbody(UnityEngine.Rigidbody source){
			linearVelocity = source.velocity;
			angularVelocity = source.angularVelocity;

			// center of mass in unity is affected by local rotation and poistion, but not scale. We need it expressed in world space:
			centerOfMass = source.transform.position + source.transform.rotation * source.centerOfMass;

			// the inertia tensor is a diagonal matrix (Vector3) because it is expressed in the space generated by the principal axes of rotation (inertiaTensorRotation).
			inertiaTensor = source.isKinematic ? Vector3.zero : source.inertiaTensorRotation * new Vector3(1/source.inertiaTensor.x,1/source.inertiaTensor.y,1/source.inertiaTensor.z);
			inverseMass = source.isKinematic ? 0 : 1/source.mass;
		}
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct Collider{
		public Quaternion rotation;
		public Quaternion inverse_rotation;
		public Oni.Bounds bounds;
		public Vector3 translation;
		public Vector3 scale;
		public float contactOffset;
		public int collisionGroup;
		public ShapeType shapeType;
		public int shapeIndex;
		public int rigidbodyIndex;
		public int materialIndex;

		public Collider(UnityEngine.Collider source, ShapeType shapeType, int shapeIndex, int rigidbodyIndex, int materialIndex){
			bounds = new Oni.Bounds(source.bounds.min,source.bounds.max);
			translation = source.transform.position;
			rotation = source.transform.rotation;
			inverse_rotation = Quaternion.Inverse(source.transform.rotation);
			scale = source.transform.lossyScale;
			contactOffset = source.contactOffset;
			this.collisionGroup = source.gameObject.layer;
			this.shapeType = shapeType;
			this.shapeIndex = shapeIndex;
			this.rigidbodyIndex = rigidbodyIndex;
			this.materialIndex = materialIndex;
		}
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct CollisionMaterial{
		public float friction;
		public float stickiness;
		public float stickDistance;
		public MaterialCombineMode frictionCombine;
		public MaterialCombineMode stickinessCombine;
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct FluidMaterial{
		public float stiffness;
		public float restDistance;
		public float restDensity;
		public float viscosity;
		public float cohesion;
		public float surfaceTension;
		public float buoyancy;
		public float drag;
		public float vorticity;
		public float elasticRange;
		public float plasticCreep;
		public float plasticThreshold;
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct SphereShape{
		public Vector3 center;	
		public float radius;

		public SphereShape(SphereCollider source){
			center = source.center;
			radius = source.radius;
		}
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct BoxShape{
		public Vector3 center;	
		public Vector3 size;
		
		public BoxShape(BoxCollider source){
			center = source.center;
			size = source.size;
        }
	}
	
	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct CapsuleShape{
		public Vector3 center;	
		public float radius;
		public float height;
		public int direction;
		
		public CapsuleShape(CapsuleCollider source){
			center = source.center;
			radius = source.radius;
			height = source.height;
			direction = source.direction;
		}

		public CapsuleShape(CharacterController source){
			center = source.center;
			radius = source.radius;
			height = source.height;
			direction = 1;
		}
	}
	
	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct HeightData{
	
		IntPtr data;
		TerrainCollider source;
		GCHandle dataHandle;
		
		public HeightData(TerrainCollider source){
			this.data = IntPtr.Zero;
			this.dataHandle = new GCHandle();
			this.source = source;
			UpdateHeightData();
        }

		/**
		 * Updates the shared memory region between Obi and Oni where terrain height data resides. 
		 */
		public void UpdateHeightData(){

			float[,] heights = source.terrainData.GetHeights(0,0,source.terrainData.heightmapWidth,source.terrainData.heightmapHeight);
			
			float[] buffer = new float[source.terrainData.heightmapWidth * source.terrainData.heightmapHeight];
			for (int y = 0; y < source.terrainData.heightmapHeight; ++y)
				for (int x = 0; x < source.terrainData.heightmapWidth; ++x)
					buffer[y*source.terrainData.heightmapWidth+x] = heights[y,x];
			
			if (dataHandle.IsAllocated)
				UnpinMemory(dataHandle);

			dataHandle = PinMemory(buffer);
			data = dataHandle.AddrOfPinnedObject();

		}
        
        public void UnpinData(){
			UnpinMemory(dataHandle);
        }

		public IntPtr AddrOfHeightData(){
			return dataHandle.AddrOfPinnedObject();
		}        

    }
	
	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct HeightmapShape{
		public Vector3 size;
		//pointer to a HeightData object. Done this way because we do not know the array size beforehand, and
		//the struct memory layout must be contiguous.
        public IntPtr data;	 
        public int resolutionU;
		public int resolutionV;
		public float sampleWidth;
		public float sampleHeight;
		
		public HeightmapShape(TerrainCollider source, IntPtr data){
			resolutionU = source.terrainData.heightmapWidth;
			resolutionV = source.terrainData.heightmapHeight;
			sampleWidth = source.terrainData.heightmapScale.x;
			sampleHeight = source.terrainData.heightmapScale.z;
			size = source.terrainData.size;
			this.data = data;
		}
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct HalfEdge{
		public int index;	
		public int indexInFace;
		public int face;
		public int nextHalfEdge;
		public int pair;
		public int endVertex;

		public HalfEdge(int index){
			this.index = index;	
			indexInFace = -1;
			face = -1;
			nextHalfEdge = -1;
			pair = -1;
			endVertex = -1;
		}
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct Vertex{
		public int index;	
		public int halfEdge;
		public Vector3 position;

		public Vertex(Vector3 position, int index, int halfEdge){
			this.index = index;
			this.halfEdge = halfEdge;
			this.position = position;
		}
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct Face{
		public int index;	
		public int halfEdge;
		public int visualVertex1; //workaround for fixed-size arrays (not supported by C# :()
		public int visualVertex2;
		public int visualVertex3;

		public Face(int index){
			this.index = index;
			halfEdge = -1;
			visualVertex1 = -1;
			visualVertex2 = -1;
			visualVertex3 = -1;
		}
	}

	[Serializable]
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct MeshInformation{
		public float volume;	
		public float area;
		public int borderEdgeCount;
		public bool closed;
		public bool nonManifold;
	}

	public static GCHandle PinMemory(object data){
		return GCHandle.Alloc(data, GCHandleType.Pinned);
	}

	public static void UnpinMemory(GCHandle handle){
		handle.Free();
	}

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern IntPtr CreateColliderGroup();
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void DestroyColliderGroup(IntPtr group);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetColliders(IntPtr group, IntPtr colliders, int num);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetRigidbodies(IntPtr group, IntPtr rigidbodies, int num);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetSphereShapes(IntPtr group, IntPtr shapes);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetBoxShapes(IntPtr group, IntPtr shapes);
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetCapsuleShapes(IntPtr group, IntPtr shapes);
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetHeightmapShapes(IntPtr group, IntPtr shapes);
        
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern IntPtr CreateSolver(int maxParticles, int maxNeighbours, float radius);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void DestroySolver(IntPtr solver);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetBounds(IntPtr solver, IntPtr bounds);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetSolverParameters(IntPtr solver, IntPtr parameters);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetSolverParameters(IntPtr solver, IntPtr parameters);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetActiveParticles(IntPtr solver, IntPtr active, int num);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void AddSimulationTime(IntPtr solver, float step_dt);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void UpdateSolver(IntPtr solver, float substep_dt);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void ApplyPositionInterpolation(IntPtr solver, float substep_dt);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetConstraintsOrder(IntPtr solver, IntPtr order);
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetConstraintsOrder(IntPtr solver, IntPtr order);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern int GetConstraintCount(IntPtr solver, int type);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetRenderableParticlePositions(IntPtr solver, IntPtr positions);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetParticlePhases(IntPtr solver, IntPtr phases);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetParticlePositions(IntPtr solver, IntPtr positions);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetPredictedParticlePositions(IntPtr solver, IntPtr positions);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetPreviousParticlePositions(IntPtr solver, IntPtr positions);
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetParticleInverseMasses(IntPtr solver, IntPtr invMasses);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetParticleSolidRadii(IntPtr solver, IntPtr radii);
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetParticleVelocities(IntPtr solver, IntPtr velocities);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetConstraintGroupParameters(IntPtr solver, int type, IntPtr parameters);
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetConstraintGroupParameters(IntPtr solver, int type, IntPtr parameters);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetColliderGroup(IntPtr solver, IntPtr group);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetCollisionMaterials(IntPtr solver, IntPtr materials);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetMaterialIndices(IntPtr solver, IntPtr indices);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetFluidMaterials(IntPtr solver, IntPtr materials, int num);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetFluidMaterialIndices(IntPtr solver, IntPtr indices);
	
    #if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetDistanceConstraints(IntPtr solver, IntPtr indices,
	                                                  				IntPtr restLengths,
																	IntPtr stiffnesses,
																	IntPtr stretching);
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetActiveDistanceConstraints(IntPtr solver, IntPtr constraints, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetBendingConstraints(IntPtr solver, IntPtr indices,
	                                                 IntPtr restBends,
	                                                 IntPtr bendingStiffnesses);
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetActiveBendingConstraints(IntPtr solver, IntPtr constraints, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetSkinConstraints(IntPtr solver, IntPtr indices,
	                                                 IntPtr points,
	                                                 IntPtr normals,
	                                                 IntPtr radiiBackstops,
	                                             	 IntPtr stiffnesses);
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetActiveSkinConstraints(IntPtr solver, IntPtr constraints, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetAerodynamicConstraints(IntPtr solver, 
														IntPtr triangleIndices, 
														IntPtr triangleNormals,
	                                                    IntPtr wind, 
	                                                    IntPtr aerodynamicCoeffs);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetActiveAerodynamicConstraints(IntPtr solver, IntPtr constraints, int n);
    
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetVolumeConstraints(IntPtr solver, IntPtr triangleIndices,
	                                               IntPtr firstTriangle,
	                                               IntPtr numTriangles,
	                                               IntPtr particleIndices,
	                                               IntPtr firstParticle,
	                                               IntPtr numParticles,
	                                               IntPtr restVolumes,
	                                               IntPtr pressureStiffnesses);
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetActiveVolumeConstraints(IntPtr solver, IntPtr constraints, int n);
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetTetherConstraints(IntPtr solver, 
												   IntPtr indices,
	                                               IntPtr maxLenghtsScales,
	                                               IntPtr stiffnesses);
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetActiveTetherConstraints(IntPtr solver, IntPtr constraints, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetPinConstraints(IntPtr solver, 
											    IntPtr indices,
                                                IntPtr pinOffsets,
                                                IntPtr stiffnesses);
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetActivePinConstraints(IntPtr solver, IntPtr constraints, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetCollisionIndices(IntPtr solver, IntPtr indices, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetCollisionDistances(IntPtr solver, IntPtr distances, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetCollisionPoints(IntPtr solver, IntPtr points, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetCollisionNormals(IntPtr solver, IntPtr normals, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetCollisionNormalImpulses(IntPtr solver, IntPtr impulses, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetCollisionTangentImpulses(IntPtr solver, IntPtr impulses, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetCollisionStickImpulses(IntPtr solver, IntPtr impulses, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetDiffuseParticlePositions(IntPtr solver, IntPtr points, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetDiffuseParticleVelocities(IntPtr solver, IntPtr points);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetDiffuseParticleNeighbourCounts(IntPtr solver, IntPtr neighbourCounts);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern IntPtr CreateHalfEdgeMesh();

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void DestroyHalfEdgeMesh(IntPtr mesh);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetVertices(IntPtr mesh, IntPtr vertices, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetHalfEdges(IntPtr mesh, IntPtr halfedges, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void SetFaces(IntPtr mesh, IntPtr faces, int n);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetVertices(IntPtr mesh, IntPtr vertices);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetHalfEdges(IntPtr mesh, IntPtr halfedges);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void GetFaces(IntPtr mesh, IntPtr faces);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern int GetVertexCount(IntPtr mesh);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern int GetHalfEdgeCount(IntPtr mesh);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern int GetFaceCount(IntPtr mesh);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern int GetHalfEdgeMeshInfo(IntPtr mesh, IntPtr meshInfo);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void Generate(IntPtr mesh, IntPtr vertices, IntPtr triangles, int vertexCount, int triangleCount, IntPtr scale);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void AreaWeightedNormals(IntPtr mesh, IntPtr mesh_vertices, IntPtr mesh_normals);

	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern void VertexOrientations(IntPtr mesh, IntPtr mesh_vertices, IntPtr mesh_normals, IntPtr vertex_orientations);

    #if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern int MakePhase(int group, ParticlePhase flags);
	
	#if (UNITY_IPHONE && !UNITY_EDITOR)
		[DllImport ("__Internal")]
	#else
		[DllImport ("libOni")] 
	#endif
	public static extern float BendingConstraintRest(float[] constraintCoordinates);

}
